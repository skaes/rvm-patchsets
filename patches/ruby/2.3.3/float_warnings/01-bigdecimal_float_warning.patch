diff --git a/ext/bigdecimal/bigdecimal.c b/ext/bigdecimal/bigdecimal.c
index 7acd94c..a16c315 100644
--- a/ext/bigdecimal/bigdecimal.c
+++ b/ext/bigdecimal/bigdecimal.c
@@ -2574,6 +2574,7 @@ BigDecimal_new(int argc, VALUE *argv)
 	return GetVpValue(iniValue, 1);
 
       case T_FLOAT:
+	rb_warn("initializing BigDecimal with an instance of Float.");
 	if (mf > DBL_DIG+1) {
 	    rb_raise(rb_eArgError, "precision too large.");
 	}
diff --git a/ext/bigdecimal/lib/bigdecimal/util.rb b/ext/bigdecimal/lib/bigdecimal/util.rb
index 0c4e486..14df338 100644
--- a/ext/bigdecimal/lib/bigdecimal/util.rb
+++ b/ext/bigdecimal/lib/bigdecimal/util.rb
@@ -37,7 +37,12 @@ class Float < Numeric
   #     # => #<BigDecimal:1dc69e0,'0.5E0',9(18)>
   #
   def to_d(precision=nil)
+    location = caller[0].gsub(/:in `.*'$/, '')
+    warn("#{location}: warning: calling .to_d on an instance of Float.")
+    old_verbose, $VERBOSE = $VERBOSE, nil
     BigDecimal(self, precision || Float::DIG)
+  ensure
+    $VERBOSE = old_verbose
   end
 end
 
